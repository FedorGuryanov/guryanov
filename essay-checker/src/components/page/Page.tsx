import React, {useCallback, useEffect, useMemo, useState} from 'react';
import './Page.scss';
import EtTextBlock from '../text-block/TextBlock';
import {useHistory} from 'react-router-dom';
import EtHeader from '../common/header/Header';
import debounce from 'lodash/debounce';
import {useDispatch, useSelector} from 'react-redux';
import {
    getEssayIdSelector,
    getEssayPendingFetchSelector,
    getEssayPendingSaveSelector,
    getEssaySelector
} from '../../store/essay/selectors';
import {createEssayRequest, fetchEssayRequest, updateEssayRequest} from '../../store/essay/actions';
import {statusNavigate} from '../../helpers/redirect';
import EtLink from '../common/link/Link';
import EtPagePoints from './points/Points';
import {ReactComponent as PointIcon} from './avocado-ask.svg';
import {ReactComponent as DonutIcon} from './avocado_indulge.svg';
import EtFooter from '../common/footer/Footer';
import {THEMES_TEXT_MAP} from '../../constants/themes';

interface EtPageProps {
    match: {
        params: {
            id?: string;
        }
    }
}

function EtPage({match: {params: {id}}}: EtPageProps) {
    const dispatch = useDispatch();
    const history = useHistory();

    const [freshStart, setFreshStart] = useState(true);
    const [createdId, setCreatedId] = useState('');
    const [selectedThemeId, setSelectedThemeId] = useState<string | null>(null);

    const createdIdState = useSelector(getEssayIdSelector);
    const pendingFetch = useSelector(getEssayPendingFetchSelector);
    const pendingSave = useSelector(getEssayPendingSaveSelector);
    const essayFetch = useSelector(getEssaySelector);

    useEffect(() => {
        statusNavigate(essayFetch, history);
        setSelectedThemeId(essayFetch?.themeId || null);
    }, [essayFetch, history]);

    useEffect(() => {
        if (createdId) {
            history.replace('/' + createdId);
        }
    }, [history, createdId]);

    useEffect(() => {
        if (id) {
            setFreshStart(false);
            dispatch(fetchEssayRequest({id}));
        } else {
            setFreshStart(true);
        }
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, []);

    useEffect(() => {
        setCreatedId(createdIdState || '');
        if (createdIdState) {
            dispatch(fetchEssayRequest({id: createdIdState}));
        }
    }, [dispatch, createdIdState, setCreatedId]);

    const saveHandler = useCallback((text: string, themeId: string, id?: string) => {
        if (!id) {
            dispatch(createEssayRequest({text, themeId}));
        } else {
            if (essayFetch) {
                dispatch(updateEssayRequest({...essayFetch, text, themeId}));
            }
        }
    }, [dispatch, essayFetch]);

    const debouncedSaveHandler = useMemo(
        () => debounce(saveHandler, 1000)
        , [saveHandler]);

    const onChangeSaveHandler = useCallback(
        (text: string, themeId: string, id?: string) => {
            debouncedSaveHandler(text, themeId, id);
        }
        , [debouncedSaveHandler]);

    const onCheck = useCallback(
        (text, themeId) => {
            // setResults(POINTS_RESULT);
            if (essayFetch) {
                debouncedSaveHandler.cancel();
                dispatch(updateEssayRequest({...essayFetch, text, themeId, status: 'ready'}));
            }
        },
        [dispatch, essayFetch, debouncedSaveHandler],
    );

    const onChange = useCallback(
        (text, themeId) => {
            setSelectedThemeId(themeId);
            onChangeSaveHandler(text, themeId, id || createdId);
        },
        [id, createdId, onChangeSaveHandler],
    );
    return (
        <div className="et-page__wrapper">
            <EtHeader loading={pendingFetch || pendingSave}/>
            <div className="et-page">
                <div className="et-page__instructions">
                    –ü—Ä–∞–≤–æ–ø–∏—Å–∞–Ω–∏–µ&nbsp;+&nbsp;–æ—Ü–µ–Ω–∫–∞&nbsp;–ø–æ&nbsp;–∫—Ä–∏—Ç–µ—Ä–∏—è–º.
                    –í–∞—à–∞&nbsp;–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å—Ç–∞—Ç—å&nbsp;—ç–∫—Å–ø–µ—Ä—Ç–æ–º&nbsp;–ï–ì–≠&nbsp;<span aria-label="üí™üèª"
                                                                                   style={
                                                                                       {
                                                                                           fontFamily: '\'Apple Color Emoji\',\'Segoe UI Emoji\', NotoColorEmoji,\'Noto Color Emoji\',\'Segoe UI Symbol\',\'Android Emoji\',EmojiSymbols',
                                                                                           lineHeight: '1em'
                                                                                       }
                                                                                   }>üí™üèª</span>
                    <br/>
                    <EtLink href="#howto" text="–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?"/>
                </div>
                {(pendingFetch && !freshStart) || (!freshStart && !essayFetch) ?
                    <div className="et-page__text-block-place"/> :
                    <EtTextBlock value={essayFetch?.text || ''}
                                 themeId={essayFetch?.themeId || null}
                                 onCheck={onCheck}
                                 onChange={onChange}
                                 id={id}
                    />
                }
            </div>
            <div className="et-page__wrapper _white">
                {selectedThemeId && THEMES_TEXT_MAP[selectedThemeId] ? <div className="et-page">
                    <div className="et-page__theme">
                        <div className="et-page__block-title">
                            –ó–∞–¥–∞–Ω–∏–µ
                        </div>
                        <div dangerouslySetInnerHTML={{__html: THEMES_TEXT_MAP[selectedThemeId].start}}/>
                        <img className="et-page__theme-img"
                             alt="Statistics for the task"
                             src={'/images/' + selectedThemeId + '.png'}
                        />
                        <div dangerouslySetInnerHTML={{__html: THEMES_TEXT_MAP[selectedThemeId].end}}/>
                    </div>
                </div> : null}
            </div>
            <div className="et-page__wrapper _pic1">
                <div className="et-page">
                    <div className="et-page__inner _paddings">
                        <div className="et-page__block-text-left">
                            <div className="et-page__block-title">
                                –î–µ–ª–∞–µ–º –∂–∏–∑–Ω—å —É—á–∏—Ç–µ–ª—è –ø—Ä–æ—â–µ
                            </div>
                            <b>essaychecker.ru</b> ‚Äî —ç—Ç–æ —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —ç—Å—Å–µ (–∑–∞–¥–∞–Ω–∏–µ 40) –ø–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ
                            –ï–ì–≠.
                            –ú—ã —É–ø—Ä–æ—â–∞–µ–º –∂–∏–∑–Ω—å —É—á–∏—Ç–µ–ª—è, –ø–æ–º–æ–≥–∞—è –ø–æ–≤—ã—Å–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –∫–∞—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∏—Å—å–º–µ–Ω–Ω–æ–≥–æ
                            –∑–∞–¥–∞–Ω–∏—è.
                            –í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞ –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ–π ‚Äî –≤—Å–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ —É –≤–∞—Å –ø–µ—Ä–µ–¥ –≥–ª–∞–∑–∞–º–∏ –≤ —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.
                            –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—É—é —Ä–∞–±–æ—Ç—É —É—á–µ–Ω–∏–∫—É, —á—Ç–æ–±—ã —Ä–∞–∑–æ–±—Ä–∞—Ç—å –æ—à–∏–±–∫–∏.
                        </div>
                    </div>
                </div>
            </div>
            <div className="et-page">
                <div className="et-page__points">
                    <div className="et-page__block-title">
                        –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –∫–∞–∫ —ç–∫—Å–ø–µ—Ä—Ç
                    </div>
                    <EtPagePoints/>
                </div>
                <div className="et-page__howto">
                    <div id="howto"/>
                    <div className="et-page__block-title">
                        –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç <span className="et-page__block-title-pic"><PointIcon/></span>
                    </div>
                    <ul className="et-page__block-text _list">
                        <li className="et-page__block-text-point">
                            –î–æ–±–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –≤ —Ñ–æ—Ä–º—É –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ù–∞—á–∞—Ç—å&nbsp;–ø—Ä–æ–≤–µ—Ä–∫—É¬ª
                        </li>
                        <li className="et-page__block-text-point">
                            –†–∞–±–æ—Ç–µ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ—Ç—Å—è —É–Ω–∏–∫–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞. –í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
                            —Å—Å—ã–ª–∫—É —Å&nbsp;–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–æ–π —É—á–µ–Ω–∏–∫—É
                        </li>
                        <li className="et-page__block-text-point">
                            –ü—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–¥–µ–ª—è—Ç—å –∏ –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫–∏ –≤ —Ç–µ–∫—Å—Ç–µ
                        </li>
                        <li className="et-page__block-text-point">
                            –û—Ü–µ–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º –ï–ì–≠ ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ –±–∞–ª–ª—ã –≤ –∫–∞–∂–¥–æ–º –ø—É–Ω–∫—Ç–µ.
                            –ù–∞–∂–º–∏—Ç–µ&nbsp;¬´–ó–∞–≤–µ—Ä—à–∏—Ç—å&nbsp;–ø—Ä–æ–≤–µ—Ä–∫—É¬ª
                        </li>
                        <li className="et-page__block-text-point">
                            –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –±—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –Ω–∞ —Å–∞–π—Ç–µ 30 –¥–Ω–µ–π. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–∞–±–æ—Ç—É, –µ—Å–ª–∏
                            –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –∫&nbsp;–Ω–µ–π&nbsp;–≤–µ—Ä–Ω—É—Ç—å—Å—è
                        </li>
                    </ul>
                </div>
            </div>
            <div className="et-page__wrapper _white">
                <div className="et-page">
                    <div className="et-page__inner">
                        <div className="et-page__block-title">
                            –ü–æ–¥–¥–µ—Ä–∂–∏—Ç–µ –Ω–∞—Å <span className="et-page__block-title-pic"><DonutIcon/></span>
                        </div>
                        –°–µ—Ä–≤–∏—Å–æ–º –º–æ–∂–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ.
                        <br/>
                        –ù–æ –Ω–∞–º –≤—Å—ë —Ä–∞–≤–Ω–æ –Ω—É–∂–Ω—ã –¥–µ–Ω—å–≥–∏ –Ω–∞ –∞—Ä–µ–Ω–¥—É —Å–µ—Ä–≤–µ—Ä–∞ –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã.
                        <br/>
                        –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –Ω–∞—Å —Ä—É–±–ª—ë–º:
                        <br/><br/>
                        <b className="_small">–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞—Ç—å, –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –≤
                            —Ñ–æ—Ä–º–µ –Ω–∏–∂–µ</b>
                        <div className="et-page__donate">
                            <iframe title="–§–æ—Ä–º–∞ –¥–ª—è –¥–æ–Ω–∞—Ç–æ–≤"
                                    src="https://yoomoney.ru/quickpay/shop-widget?writer=seller&targets=%D0%9D%D0%B0%20%D1%80%D0%B0%D0%B7%D0%B2%D0%B8%D1%82%D0%B8%D0%B5%20%D0%BF%D1%80%D0%BE%D0%B5%D0%BA%D1%82%D0%B0%20essaychecker.ru&targets-hint=&default-sum=200&button-text=11&payment-type-choice=on&mobile-payment-type-choice=on&hint=&successURL=https%3A%2F%2Fessaychecker.ru%3Fthanks%3D1&quickpay=shop&account=4100117326158486&"
                                    width="100%" height="222" frameBorder="0" allowTransparency scrolling="no"></iframe>
                        </div>
                    </div>
                </div>
            </div>
            <EtFooter/>
        </div>
    );
}

export default React.memo(EtPage);
